#tag Module
Protected Module M_UUID
	#tag Method, Flags = &h1, Description = 50756C6C7320746865206461746520616E642074696D652066726F6D2061205555494420762E373B2072657475726E73204E696C20666F72206F746865722076657273696F6E732E2052657475726E73206173206C6F63616C2054696D655A6F6E65206966206E6F6E652069732070726F76696465642E
		Protected Function ExtractDateTime(uuid As String, tz As TimeZone = Nil) As DateTime
		  #if not DebugBuild
		    #pragma BackgroundTasks false
		  #endif
		  #pragma BoundsChecking false
		  #pragma NilObjectChecking false
		  #pragma StackOverflowChecking false
		  
		  if ExtractVersion( uuid ) <> 7 then
		    return nil
		  end if
		  
		  uuid = uuid.ReplaceAllBytes( "-", "" )
		  
		  var mb as MemoryBlock = DecodeHex( uuid )
		  mb.LittleEndian = false
		  
		  const kShift2 as UInt64 = 256^2
		  
		  var ms as UInt64 = mb.UInt64Value( 0 ) \ kShift2
		  
		  //
		  // We are going to assume the UUID was generated by us, so the microseconds will be in
		  // the tail end of bytes 7 and 8
		  //
		  
		  var encodedµs as UInt64 = mb.UInt16Value( 6 ) and CType( &b0000111111111111, UInt64 )
		  
		  const kThousand as UInt64 = 1000
		  
		  var µs as UInt64 = encodedµs * kThousand / CType( 4096, UInt64 )
		  
		  if µs >= kThousand then
		    //
		    // Can't be a valid value
		    // so we will ignore it
		    //
		    µs = 0
		  end if
		  
		  var secs as double = ( ms / 1000.0 ) + ( µs / 1000000.0 )
		  
		  var dt as new DateTime( secs, tz )
		  return dt
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h1, Description = 52657475726E73207468652076657273696F6E206F6620612076616C696420555549442C206F72202D31206966206E6F742076616C69642E
		Protected Function ExtractVersion(uuid As String) As Integer
		  #if not DebugBuild
		    #pragma BackgroundTasks false
		  #endif
		  #pragma BoundsChecking false
		  #pragma NilObjectChecking false
		  #pragma StackOverflowChecking false
		  
		  var validator as new RegEx
		  validator.SearchPattern = kValidatorPattern
		  
		  var match as RegExMatch = validator.Search( uuid )
		  
		  if match is nil then
		    return kNotValid
		  end if
		  
		  var version as integer = match.SubExpressionString( 1 ).ToInteger
		  return version
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h1, Description = 47656E657261746573205555494420762E34202872616E646F6D206279746573292E
		Protected Function GenerateV4(withHyphens As Boolean = True) As String
		  #if not DebugBuild
		    #pragma BackgroundTasks false
		  #endif
		  #pragma BoundsChecking false
		  #pragma NilObjectChecking false
		  #pragma StackOverflowChecking false
		  
		  var uuid as MemoryBlock = Crypto.GenerateRandomBytes( 16 )
		  
		  var p as ptr = uuid
		  
		  var value as byte
		  
		  //
		  // Set the version in byte 7
		  //
		  value = p.Byte( 6 )
		  value = value and CType( &b00001111, Byte ) // Turn off first bits
		  value = value or CType( &b01000000, Byte ) // Set to 4
		  p.Byte( 6 ) = value
		  
		  //
		  // Set the first bit of byte 9
		  //
		  value = p.Byte( 8 )
		  value = value and CType( &b00111111, Byte ) // Turn off first bits
		  value = value or CType( &b10000000, Byte ) // Turn on first bit
		  p.Byte( 8 ) = value
		  
		  var result as string = EncodeHex( uuid )
		  
		  if withHyphens then
		    result = result.LeftBytes( 8 ) + "-" + _
		    result.MiddleBytes( 8, 4 ) + "-" + _
		    result.MiddleBytes( 12, 4 ) + "-" + _
		    result.MiddleBytes( 16, 4 ) + "-" + _
		    result.RightBytes( 12 )
		  end if
		  
		  return result
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h1, Description = 47656E65726174657320736F727461626C65205555494420762E37202863757272656E74206461746520616E642074696D65206173206D6963726F7365636F6E647320706C75732072616E646F6D206279746573292E
		Protected Function GenerateV7(withHyphens As Boolean = True) As String
		  #if not DebugBuild
		    #pragma BackgroundTasks false
		  #endif
		  #pragma BoundsChecking false
		  #pragma NilObjectChecking false
		  #pragma StackOverflowChecking false
		  
		  //
		  // See RFC-9562
		  //
		  // https://www.rfc-editor.org/rfc/rfc9562.html
		  //
		  
		  var uuid as new MemoryBlock( 16 )
		  uuid.LittleEndian = false
		  
		  var now as DateTime = DateTime.Now
		  var µs as UInt64 = now.SecondsFrom1970 * 1000000.0
		  
		  //
		  // Copy to the first 6 bytes
		  // 
		  const kShift2 as UInt64 = 256 * 256
		  const kThousand as UInt64 = 1000
		  
		  var ms as UInt64 = µs \ kThousand
		  
		  ms = ms * kShift2
		  uuid.UInt64Value( 0 ) = ms
		  
		  //
		  // Write the microseconds to the the 7th and 8th bytes
		  // noting that the value will not take more than the 12 bits allowed;
		  // we use the recommendation of the RFC to encode the value as a fraction
		  // of 4,096 thus stretching it out further, potentially to 12 bits
		  //
		  var remainingµs as UInt16 = µs mod kThousand
		  var encodedµs as UInt64 = remainingµs * CType( 4096, UInt64 ) \ kThousand
		  
		  //
		  // We set the version here by flipping the first bits of the value,
		  // which works because we know the first nibble will be &b0000
		  //
		  encodedµs = encodedµs or &b0111000000000000 //  Version 7
		  
		  uuid.UInt16Value( 6 ) = encodedµs
		  
		  const kRandomCount as integer = 8
		  
		  var mbRandom as MemoryBlock = Crypto.GenerateRandomBytes( kRandomCount )
		  
		  //
		  // Adjust the bits of the first byte (ultimately byte 9 of the UUID)
		  //
		  var p as ptr = mbRandom
		  
		  var value as byte = p.Byte( 0 )
		  value = value and CType( &b00111111, Byte ) // Turn off the first two bits
		  value = value or CType( &b10000000, Byte ) // Turn on the first bit
		  p.Byte( 0 ) = value
		  
		  uuid.CopyBytes mbRandom, 0, kRandomCount, 16 - kRandomCount
		  
		  var result as string = EncodeHex( uuid )
		  
		  if withHyphens then
		    result = result.LeftBytes( 8 ) + "-" + _
		    result.MiddleBytes( 8, 4 ) + "-" + _
		    result.MiddleBytes( 12, 4 ) + "-" + _
		    result.MiddleBytes( 16, 4 ) + "-" + _
		    result.RightBytes( 12 )
		  end if
		  
		  return result
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h1, Description = 52657475726E7320547275652069662074686520555549442069732076616C696420696E20666F726D2E
		Protected Function IsValid(uuid As String) As Boolean
		  return ExtractVersion( uuid ) <> kNotValid
		  
		End Function
	#tag EndMethod


	#tag Constant, Name = kNotValid, Type = Double, Dynamic = False, Default = \"-1", Scope = Private
	#tag EndConstant

	#tag Constant, Name = kValidatorPattern, Type = String, Dynamic = False, Default = \"(\?x)\n\n\\A\n\n(\?|\n  [[:xdigit:]]{12}\n  ([12345678]) # version\n  [[:xdigit:]]{3}\n  [89AB] [[:xdigit:]]{15}\n  |\n  [[:xdigit:]]{8} - \n  [[:xdigit:]]{4} - \n  ([12345678]) # version\n  [[:xdigit:]]{3} - \n  [89AB][[:xdigit:]]{3} - \n  [[:xdigit:]]{12}\n)\n\n\\z", Scope = Private
	#tag EndConstant

	#tag Constant, Name = kVersion, Type = String, Dynamic = False, Default = \"1.0", Scope = Protected
	#tag EndConstant


	#tag ViewBehavior
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
	#tag EndViewBehavior
End Module
#tag EndModule
